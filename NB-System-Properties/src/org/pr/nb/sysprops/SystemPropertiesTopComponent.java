/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.pr.nb.sysprops;

import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import javax.swing.table.TableColumnModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.pr.nb.sysprops//SystemProperties//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "SystemPropertiesTopComponent",
        iconBase = "org/pr/nb/sysprops/properties16.png",
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "org.pr.nb.sysprops.SystemPropertiesTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_SystemPropertiesAction",
        preferredID = "SystemPropertiesTopComponent"
)
@Messages({
    "CTL_SystemPropertiesAction=System Properties",
    "CTL_SystemPropertiesTopComponent=SystemProperties Window",
    "HINT_SystemPropertiesTopComponent=This is a SystemProperties window",
    "copyPropertyNamePopupMenuItem.text=Copy Name",
    "copyPropertyValuePopupMenuItem.text=Copy Value",
    "copyPropertyPopupMenuItem.text=Copy Name and Value",
})
public final class SystemPropertiesTopComponent extends TopComponent  {

    public SystemPropertiesTopComponent() {
        initComponents();
        setName(Bundle.CTL_SystemPropertiesTopComponent());
        setToolTipText(Bundle.HINT_SystemPropertiesTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tablePopupMenu = new javax.swing.JPopupMenu();
        copyPropertyNameMenuItem = new javax.swing.JMenuItem();
        copyPropertyValueMenuItem1 = new javax.swing.JMenuItem();
        copyPropertyMenuItem = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        propertiesTable = new javax.swing.JTable();

        org.openide.awt.Mnemonics.setLocalizedText(copyPropertyNameMenuItem, Bundle.copyPropertyNamePopupMenuItem_text());
        tablePopupMenu.add(copyPropertyNameMenuItem);

        org.openide.awt.Mnemonics.setLocalizedText(copyPropertyValueMenuItem1, Bundle.copyPropertyValuePopupMenuItem_text());
        tablePopupMenu.add(copyPropertyValueMenuItem1);

        org.openide.awt.Mnemonics.setLocalizedText(copyPropertyMenuItem, Bundle.copyPropertyPopupMenuItem_text());
        tablePopupMenu.add(copyPropertyMenuItem);

        propertiesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        propertiesTable.setComponentPopupMenu(tablePopupMenu);
        jScrollPane1.setViewportView(propertiesTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem copyPropertyMenuItem;
    private javax.swing.JMenuItem copyPropertyNameMenuItem;
    private javax.swing.JMenuItem copyPropertyValueMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable propertiesTable;
    private javax.swing.JPopupMenu tablePopupMenu;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
        //Read System properties
        //Create Table model
        //Display System properties
        Properties sysProps = System.getProperties();
        Enumeration<String> keys = (Enumeration<String>) sysProps.propertyNames();
        List<PropertiesTableDataObject> properties = new ArrayList<PropertiesTableDataObject>();
        while (keys.hasMoreElements()) {
            String key = keys.nextElement();
            String value = sysProps.getProperty(key);
            Map.Entry<String, String> entry = new AbstractMap.SimpleImmutableEntry<String, String>(key,value);
            PropertiesTableDataObject obj = new PropertiesTableDataObject(entry,PropertiesTableDataObject.Flavour.PROP);
            properties.add(obj);
        }
        Map<String, String> envProps = System.getenv();
        Set<Map.Entry<String, String>> entries = envProps.entrySet();
        for (Map.Entry<String, String> entry : entries) {
            PropertiesTableDataObject obj = new PropertiesTableDataObject(entry,PropertiesTableDataObject.Flavour.ENV);
            properties.add(obj);
        }
        Collections.sort(properties, new PropertiesTableDataObjectComparator());
        PropertiesTableModel model = new PropertiesTableModel(properties);
        propertiesTable.setModel(model);
        TableColumnModel cmodel = propertiesTable.getColumnModel();
        int count = cmodel.getColumnCount();
        for (int i = 0; i < count; i++) {
            cmodel.getColumn(i).setCellRenderer(new PropertyTableCellRenderer());
        }
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
