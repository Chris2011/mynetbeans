/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.pr.nb.crypto.wizard;

import java.io.File;
import java.util.Objects;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.ChangeSupport;
import org.openide.util.NbBundle;
import org.pr.nb.crypto.UserInputs;

@NbBundle.Messages({
    "step.name=Step #1: Inputs",
    "store.file.chooser.title=Keystore location"
})
public final class GenCertInputsVisualPanel extends JPanel implements DocumentListener{

    private UserInputs inputs;
    
    private ChangeSupport changeSupport;

    /**
     * Creates new form GenCertVisualPanel1
     */
    public GenCertInputsVisualPanel() {
        changeSupport = new ChangeSupport(this);
        initComponents();
    }

    @Override
    public String getName() {
        return Bundle.step_name();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        aliasTextField = new javax.swing.JTextField();
        keySizeSpinner = new javax.swing.JSpinner();
        storePassPasswordField = new javax.swing.JPasswordField();
        keyPassPasswordField = new javax.swing.JPasswordField();
        storeFileChooserButton = new javax.swing.JButton();
        storeLocationTextField = new org.pr.nb.crypto.NBFileObjectTextField();
        jLabel6 = new javax.swing.JLabel();
        keyStoreNameTextField = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(GenCertInputsVisualPanel.class, "GenCertInputsVisualPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(GenCertInputsVisualPanel.class, "GenCertInputsVisualPanel.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(GenCertInputsVisualPanel.class, "GenCertInputsVisualPanel.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(GenCertInputsVisualPanel.class, "GenCertInputsVisualPanel.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(GenCertInputsVisualPanel.class, "GenCertInputsVisualPanel.jLabel5.text")); // NOI18N

        keySizeSpinner.setModel(new javax.swing.SpinnerNumberModel(1024, 256, 2048, 64));

        org.openide.awt.Mnemonics.setLocalizedText(storeFileChooserButton, org.openide.util.NbBundle.getMessage(GenCertInputsVisualPanel.class, "GenCertInputsVisualPanel.storeFileChooserButton.text")); // NOI18N
        storeFileChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeFileChooserButtonActionPerformed(evt);
            }
        });

        storeLocationTextField.setEditable(false);
        storeLocationTextField.setText(org.openide.util.NbBundle.getMessage(GenCertInputsVisualPanel.class, "GenCertInputsVisualPanel.storeLocationTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(GenCertInputsVisualPanel.class, "GenCertInputsVisualPanel.jLabel6.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(keySizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aliasTextField)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(storeLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(storeFileChooserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(storePassPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keyPassPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keyStoreNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {aliasTextField, keyPassPasswordField, keyStoreNameTextField, storeLocationTextField, storePassPasswordField});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel3, jLabel4, jLabel5, jLabel6});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(aliasTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(keySizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(storePassPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(keyPassPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(keyStoreNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(storeLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(storeFileChooserButton))
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {aliasTextField, jLabel1, jLabel2, jLabel3, jLabel4, jLabel5, jLabel6, keyPassPasswordField, keySizeSpinner, keyStoreNameTextField, storeFileChooserButton, storeLocationTextField, storePassPasswordField});

    }// </editor-fold>//GEN-END:initComponents

    private void storeFileChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storeFileChooserButtonActionPerformed
        FileChooserBuilder builder = new FileChooserBuilder(System.getProperty(
            "user.home"));
        builder.setTitle(Bundle.store_file_chooser_title());
        builder.setDirectoriesOnly(true);
        File selFile = builder.showSaveDialog();
        FileObject file = FileUtil.toFileObject(FileUtil.normalizeFile(selFile));
        storeLocationTextField.setValue(file);
        changeSupport.fireChange();
    }//GEN-LAST:event_storeFileChooserButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField aliasTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPasswordField keyPassPasswordField;
    private javax.swing.JSpinner keySizeSpinner;
    private javax.swing.JTextField keyStoreNameTextField;
    private javax.swing.JButton storeFileChooserButton;
    private org.pr.nb.crypto.NBFileObjectTextField storeLocationTextField;
    private javax.swing.JPasswordField storePassPasswordField;
    // End of variables declaration//GEN-END:variables

    void showSettings(UserInputs inputs) {
        this.inputs = inputs;
        setIfNotNull(aliasTextField, inputs.getAlias());
        setIfNotNull(keySizeSpinner, inputs.getKeySize());
        setIfNotNull(storePassPasswordField, inputs.getStorePass());
        setIfNotNull(keyPassPasswordField, inputs.getKeyPass());
        storeLocationTextField.setValue(inputs.getKeyStore());
        setIfNotNull(keyStoreNameTextField, inputs.getKeyStoreName());
    }

    UserInputs getInputs() {
        inputs.setAlias(aliasTextField.getText());
        inputs.setKeyPass(keyPassPasswordField.getPassword());
        inputs.setStorePass(storePassPasswordField.getPassword());
        inputs.setKeySize((Integer) keySizeSpinner.getValue());
        inputs.setKeyStore(storeLocationTextField.getValue());
        inputs.setKeyStoreName(keyStoreNameTextField.getText());
        return this.inputs;
    }

    private void setIfNotNull(JTextField textField, String text) {
        if (Objects.nonNull(text)) {
            textField.setText(text);
        }
    }

    private void setIfNotNull(JSpinner keySizeSpinner, Integer value) {
        if (Objects.nonNull(value)) {
            keySizeSpinner.setValue(value);
        }
    }

    private void setIfNotNull(JPasswordField passwordField, char[] value) {
        if (Objects.nonNull(value)) {
            passwordField.setText(new String(value));
        }
    }

    boolean isDataValid() {
        boolean retValue = aliasTextField.getText().length() > 0 &&
            storePassPasswordField.getPassword().length > 0 &&
            keyPassPasswordField.getPassword().length > 0 &&
            Objects.nonNull(storeLocationTextField.getValue()) &&
            keyStoreNameTextField.getText().length() > 0;
        return retValue;
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        changeSupport.fireChange();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        changeSupport.fireChange();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        changeSupport.fireChange();
    }

    public void addChangeListener(ChangeListener l) {
        changeSupport.addChangeListener(l);
    }

    public void removeChangeListener(ChangeListener l) {
        changeSupport.removeChangeListener(l);
    }


}
